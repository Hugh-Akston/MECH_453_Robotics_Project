#+TITLE: Project Pseudocode 
#+AUTHOR: Luke Freyhof

* What needs to be accomplished by the robot?
  1. User sets up the whiteboard
  2. User places the robot near the whiteboard
  3. User plugs the robot in to the computer and power supply
  4. User uploads the Arduino sketch to the robot
  5. User types in a math expression like “4+2” into the serial monitor and then presses enter on their keyboard
  6. The Arduino takes in the math expression and converts it into code that is understandable by the Arduino
  7. The Arduino computes the answer to the “converted” mathematical expression
  8. The Arduino sends a message to the robot arm and causes the arm to move toward the whiteboard into the writing position for the first number
  9. The Arduino sends another message to robot arm telling it to write the first digit of the answer to the mathematical expression
  10. The robot arm writes the first digit and then moves back away from the board into the “home” position.
  11. If there is a second digit that needs to be written, the Arduino tells the robot arm to move from the home position to the board in the second position.
  12. The Arduino sends a message to the robot arm telling it to write the second digit of the answer
  13. The robot arm writes the second digit of the answer
  14. The robot arm returns to the home position
  15. The Arduino prints to the serial monitor a message telling the user that the answer has been written out
  16. If the user wants to use The Math Robot to solve another equation, they will need to erase the whiteboard manually and then send another message into the serial monitor 

* Supported Mathematical Functions 
| Function       | User Input Symbol | Arduino Syntax |
| Addition       | +                 | +              |
| Subtraction    | -                 | -              |
| Multiplication | *                 | *              |
| Division       | /                 | /              |

* Helpful Online Resources
  + https://www.norwegiancreations.com/2018/02/creating-a-command-line-interface-in-arduinos-serial-monitor/
  + https://forum.arduino.cc/t/serial-input-basics-updated/382007
  + https://www.programmingelectronics.com/dtostrf/
    Convert float to string
* Pseudocode
** What functions do we need?
*** Function for computing math expression results
*** Function for interpreting input from user and converting it to Arduino code
*** Function for deciding which characters to draw
    1. Convert the float to a string
       Use dtostrf function
       1. dtostrf(float_value, min_width, num_digits_after_decimal, where_to_store_string)
	  float_value = This is the computed answer to the math expression
	  min_width = 1 (This doesn't really matter for our purposes.  The values will almost always be larger than this.)
	  num_digits_after_decimal = 2
	  where_to_store_string = whatever output variable name we decide
    2. Break the string up with the substring function
    3. Check the first value of the substring
       If it is a number, then the first thing that we need to draw is a + sign
       If it is a -, then the first thing that we need to draw is a - sign
*** Function for calling number drawing functions
    1. Check the variable for the first digit in the answer string with a switch case function
       Use a case for each possible digit (0 - 9)
    2. Example Case: 0
       1. 
*** Function for creating and setting waypoints between key coordinates
Inspiration MATLAB Code
-----------------------
%% line 
n = 4;
x = linspace(-3, -2.5, n);
m = 0;
y_int = 1;
y = m*x+y_int;
-----------------------
    1. Set a variable for the number of points from point A to B inclusive of the endpoints A and B
       1. linspace will need to be implemented manually in Arduino, because there isn't a built in function for it.
*** Function for finding the corresponding theta values for the cartesian coordinate values using inverse kinematics
*** Function for setting desired velocities at the waypoints (use analytical jacobian)
*** Function for inputing key coordinates and waypoints into the IK formulas to find a set of joint angles that the robot arm needs to move though
*** Function for safely positioning robot arm at the starting point each symbol
*** Function for safely moving robot arm back to the home position
*** Dr. M's plotting function
    First find the points that need to be drawn between
    Next take the inverse kinematics between teh waypoints to find the initial and final joint angle values
    Then set the velocity at the tip of the robot at each waypoint
    Then set the velocity of the joints at the end points
